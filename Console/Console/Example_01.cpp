/*
 주석은 최대한 많이 남기자.

 주석의 역할은 컴퓨터가 읽지 않는다.  -> 해석을 하지않는다.

 유도리없는 똑똑한 컴퓨터

 컴퓨터는 효율적인걸 좋아한다.

 단위 주석

 글꼴
 1iIlL0Oo

*/

// 전처리기 명령어
// #: 명령 지시자
//#pragma once


#pragma region 프로그래밍 언어
/*
 => 프로그래밍이란?
 - programing : program + ing
 프로그램을 만드는 것 ->개발을 의미한다.

 => 프로그래밍 언어란?
 
 -컴푸터와 대화 또는 명령을 할수있는 일련의 명령문을 작성할수 있는 언어를 말한다.
 위를 이용 프로그램을 만드는것이 가능

 =>프로그래밍 언어에는 다양한 언어가 존재하지만 크게 2가지로 분류할수 있다.
   1. 툭정기능 구현에 최적화된 언어
   2. 범용적 언어 **

   C++은 메모리 최적화 언어이다

=> 프로그래밍 언어를 컴퓨터에서 이해하는 방법

- c/c++ 언어로 작성되어 있는 코드는 컴퓨터가 이해할수 있는 명령문이기 때문에 c/c++ 언어는 중간에서 언어를
해석해주는 번역가 역할의 무언가가 필요하다.

** 이 기능을 수행하는 친구가 바로 컴파일러
 ㄴ 컴파일러는 해당코드를 컴퓨터가 이해할수 있는 언어로 번역하는 역할을 한다.

 - 컴파일러가 프로그래밍 언어와 컴퓨터사이엣 통역사 역할을 해주기 때문에 사람은 컴퓨터의 언어를 모른다고 하여도 
 컴퓨터에게 명령문을 내리는 것이 가능하다.

 -c/c++ 컴파일 절차는 절차지향적이 기본값으로 세팅되어 있다.
 ㄴ컴파일러 != 인터프리터

 => 프로그래밍 기술 및 기법

 - 프로그래밍 기술은 점차 발전해 왔으며 앞으로도 발전할 것임
 ㄴ 다양한기법중 현재는 크게 4가지만 기억하면 된다.

 1. 순차적 프로그래밍 (절차지향)
 ㄴ 프로그래밍 초기 단계부터 사용된 기법으로 코드의 흐름에 따라 프로그래밍 하는 기술.
 ㄴ 요약하면 프로그래밍의 시작부터 종료까지 흐름을 그대로 프로그래밍 한다.
 ㄴ 이러한 방식은 프로그램의 흐름을 따라가기 때문에 구조적이지 못하고 코드가 여기저기 흩어져 있기 때문에
   유지보수가 힘들다는 단점이 존재
   ㄴ C 스타일

 2. 구조적 프로그래밍
 ㄴ 순차적 프로그래밍의 단점을 보완하기 위해 나온 방식
 ㄴ 절차와의 다른점은 코드의 구조를 기능단위로 묶는 방식을 채택.
 ㄴ 함수지향 프로그래밍이라고도 부르며 순차적 프로그래밍보다 유지보수가 용이하다는 장점이 있다.

 * 이러한 기능들을 한데 묶어 모듈이라는 형태로 만들게 되고 이는 프로그래밍 라이브러리로 발전.
   ㄴ C 스타일



 3. 객체지향 프로그래밍
 ㄴ 위에 언급한 두 방식과는 전혀다른 방법으로 코드의 기준을 "객체"단위로 묶어 프로그래밍 하는 방식
 ㄴ 모든 대상에는 속성과 매서드가 있고 이를 하나로 묶어 객체로 만드는 방식이며 여기에서 말하는 대상에는 
 눈에 보이지 않는 것도 포함되어 있다.
 ㄴ 객체지향 기법에는 다양한기법이 있으나 이는 객체지향 수업때 다룬다.
 ㄴC++ 스타일 + C# 스타일

 4. 컴포넌트 (기반) 프로그래밍
 ㄴ 엔진 스타일 + 플랫폼 스타일
 ㄴ 코딩의 기준을 객체가 아닌 컴포넌트 단위로 프로그래밍 한다.
 ㄴ 각각의 컴포넌트는 독립적으로 움직이는 부품과 같으므로 다리를 떼서 동물에게 붙여주면 걷거나 달리는
 것이 가능하게 되며 앞으로 배우게 될 언리얼 엔진이 ㅊ구하는 방식이 컴포넌트 방식임.




  하위개체를 포함하는 방식
*/
#pragma endregion 여기도 가능



/* 메인 함수 EP Entry Point (진입점)

- 메인 함수는 1개만 존재해야 한다.
 ㄴ C/C++ 언어로 작성되어 있는 프로그램이 처음 실행되는 부분

 ㄴ C/C++ 언어는 프로그램이 처음 실행되기 위해서 반드시 main 함수를 포함해야함
  - 만약 메인 함수를 포함하고 있지 않으면 실행자체가 되지 않음.

  ** C/C++ 언어가 프로그램으로 변환되기 위해서 거치는 큰 단계

  1. 전처리기 단계
  2. 컴파일 단계
  3. 링크 단계


 
*/

// 헤더 파일 (표준)
// C++ 코어 헤더
#include <iostream>
/*
▣ iostream: 입, 출력을 담당하는 C++ 표준 라이브러리

- 인풋과 아웃풋을 연결하는 스트림을 개방

- # include 는 해당 경로에 있는 파일의 내용을 단순하게 복사한다.

- iostream에 선언되어 있는 cout / cin / endl (console out /...)

*/


#include <Windows.h>
// 소문자 h는 구버전 헤더파일 C


// 절대 / 상대
//#include "Debug\Console.tlog\"

//프로그래머 생성
//#include "MainGame.h"

void TextColor(int font, int backGround);



using namespace std;
//using 지시자

void main()
{
	/*
	▶ 코드 작성의 기본
	ㄴ 빨간색 밑줄을 보게된다면.....

	1. 오타 체크
	2. 앞, 뒤를 체크한다.
	3. 세미콜론을 쳌한다 (;)
	4. 논리적으로 성립이 되는지 확인한다.

	※ 일단 ; 은 코딩의 마침표 -> 반드시 찍어줘야 한다.

	*/
	//cout :  출력해라
	//endl : 줄을 바꾼다.
	//<< : 출력 연산자 -> cout (c언어 -> printf())
	//>> : 입력 연산자 -> cin  (c언어 -> scanf())


	// :: -> 접근 연산자
	// 대부분의 문법은 프로그래머가 귀찮으면 효율적이다.
	// 저 귀찮음을 설계로 풀어주는 방식이 그 프로그래머의 역량
	// 1. 이거 쓰자 메모리 코스트가 압도적으로 싸다.
	std::cout << "안녕하세요" << std::endl;
	// 2. 
	cout << "안녕하세요" << endl;


	cout << "문자 출력" << "그냥 쌍따옴표 안에 적으면 된다." << endl;
	cout << "숫자 출력" << 12345 << "그냥 숫자 적으면 된다." << endl;
	cout << "★";
	//2024_7_17

	printf("안녕하세요! \n");

	/*
	▶ printf() / scanf() 의 서식 문자

	- 서식 문자는 문자열을 출력 / 입력을 받을때 해당 서식문자의 자리를 가른수로 대체하기 위한 자리매김 역할을 
	  하는 문자를 의미한다.

	- 사용하는 이유는 고정되어 있지 않음 문자열을 출력/ 입력받는 것이 가능하기 때문 
	
	▷ printf() / scanf() 서식문자 -> 여러개 가능

	a. %d       ->    int
	b. %ld      ->    long
	c. %lld     ->    longlong
	d. %c       ->    char
	e. %s       ->    문자열 (string)
	f. %f       ->    float
	g. %lf      ->    double


	▷ printf 특수문자

	-\n   ->  개행  줄바꿈
	-\t   ->  수평  수평띄우기
	-\v   ->  수직  수직 띄우기
	-\\   ->  \
	-\?   ->  ?
	-\'   ->  '
	-\"   ->  "


	*/
    
	cout << "오늘 날씨가 \"매우\" 안좋다" << endl;


	TextColor(4, 15);
	cout << "==================" << endl;




}
		
void TextColor(int font, int backGround)
{
	int Color = font + backGround * 16;
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), Color);

}


/*
01. 취업을 위해서 지금부터 정리하는 습관을 들이면 아주좋다.
ㄴ a. 기술면접 + 이론 
ㄴ b. 너희의 성장 과정 매일 매일 쓰기 

※ 이 수업을 수강하는 너희에게 원하는 점
ㄴ 1. 방향성을 잘 따라온다.
ㄴ 2. 공부를 아주 열심히 한다.
ㄴ 3. 너희 목표인 취업에 성공해야 한다.
 ㄴ a. 논리 사고 개방
 ㄴ b. 추론
 ㄴ c. 설계
 ㄴ d. 에러를 고치는 능력




 2024_7_16

 과제 1. 좋아하는 캐릭터 출력

 - 캐릭터 양식은 자유

 -최소 사이즈 40 x 40 지킬것

 ※ 꼼수 X

 winapi 좌상단 (0.0)

 과제 2. 자기 소개 출력
 -이름, 나이, 연락처, 주소, 이메일, 각오, 가고싶은 회사, 만들고싶은 게임, 취미

 -가독성을 본인의 판단하에 잘 만든다.

 도전 과제1. 자기 소개 출력

 -이름, 나이, 연락처, 주소, 이메일, 각오, 가고싶은 회사, 만들고싶은 게임, 취미

 -항목은 동일

 - 단, 입력한 정보에 대한 단일 출력이 아닌 학장성을 고려한 설계 및 모듈화를 시켜올 것
 ㄴ 객체 (추상 클 / 인터페이스) / 컴포넌트 (디자인 패턴) 택 1


*/

/*
7_17

과제 1. 좋아하는 캐릭터 출력 2

-동일캐릭터 사용 금지

-어제와 진행한 과제와 동일하지만 컬러풀하게 만들어 온다.

-최소 사이즈 50 x 50


과제 2. 간단한 아이템 만들기

-종류와 데미지, 그리고가격이 다른 무기, 방어구 5종 만들고 하면에 출력한다.

- 무기 1종 + 방어구 1종에는 반드시 도트를 적용해야 한다.
ㄴ 총 2종


과제 3. 랜덤숫자 담기

- 1 ~ 5까지 랜덤숫자
- 6 ~ 19까지

- 23 ~ 189 까지
ㄴ출력이 될때 최소와 최댓값을 명시해야한다.



한줄 조사, 반복문 + 연산자

- 반복문의 종류 + 연산자의 종류

- 노트에 적어온다.



*/


